	if (from_screen) {
	    int glyph;	/* glyph at selected position */

	    if (flags.verbose)
		pline("Please move the cursor to %s.",
		       what_is_an_unknown_object);
	    else
		pline("Pick an object.");

	    ans = getpos(&cc, quick, what_is_an_unknown_object);
	    if (ans < 0 || cc.x < 0) {
		flags.verbose = save_verbose;
		return MOVE_CANCELLED;	/* done */
	    }
	    flags.verbose = FALSE;	/* only print long question once */

	    /* Convert the glyph at the selected position to a symbol. */
	    glyph = glyph_at(cc.x,cc.y);
	    if (glyph_is_cmap(glyph)) {
		if (iflags.UTF8graphics) {
			/* Temporary workaround as NetHack can't yet
			 * display UTF-8 glyphs on the topline */
			force_defsyms = TRUE;
			sym = defsyms[glyph_to_cmap(glyph)].sym;
		} else {
		sym = showsyms[glyph_to_cmap(glyph)];
		}
	    } else if (glyph_is_trap(glyph)) {
		sym = showsyms[trap_to_defsym(glyph_to_trap(glyph))];
	    } else if (glyph_is_object(glyph)) {
		sym = oc_syms[(int)objects[glyph_to_obj(glyph)].oc_class];
		if (sym == '`' && iflags.bouldersym && ((int)glyph_to_obj(glyph) == BOULDER || (int)glyph_to_obj(glyph) == MASS_OF_STUFF))
			sym = iflags.bouldersym;
	    } else if (glyph_is_monster(glyph)) {
		/* takes care of pets, detected, ridden, and regular mons */
		sym = monsyms[(int)mons[glyph_to_mon(glyph)].mlet];
	    } else if (glyph_is_swallow(glyph)) {
		sym = showsyms[glyph_to_swallow(glyph)+S_sw_tl];
	    } else if (glyph_is_invisible(glyph)) {
		sym = DEF_INVISIBLE;
	    } else if (glyph_is_warning(glyph)) {
		sym = glyph_to_warning(glyph);
	    	sym = warnsyms[sym];
	    } else {
		impossible("do_look:  bad glyph %d at (%d,%d)",
						glyph, (int)cc.x, (int)cc.y);
		sym = ' ';
	    }
	}

	/*
	 * Check all the possibilities, saving all explanations in a buffer.
	 * When all have been checked then the string is printed.
	 */

	/* Check for monsters */
	for (i = 0; i < MAXMCLASSES; i++) {
	    if (sym == (from_screen ? monsyms[i] : def_monsyms[i]) &&
		monexplain[i]) {
		need_to_look = TRUE;
		if (!found) {
		    Sprintf(out_str, "%c       %s", (uchar)sym, an(monexplain[i]));
		    firstmatch = monexplain[i];
		    found++;
		} else {
		    found += append_str(out_str, an(monexplain[i]));
		}
	    }
	}
	/* handle '@' as a special case if it refers to you and you're
	   playing a character which isn't normally displayed by that
	   symbol; firstmatch is assumed to already be set for '@' */
	if ((from_screen ?
		(sym == monsyms[S_HUMAN] && cc.x == u.ux && cc.y == u.uy) :
		(sym == def_monsyms[S_HUMAN] && !iflags.showrace)) &&
	    !(Race_if(PM_HUMAN) || Race_if(PM_INHERITOR) || Race_if(PM_ELF) || Race_if(PM_DROW) || Race_if(PM_MYRKALFR)) && !Upolyd)
	    found += append_str(out_str, "you");	/* tack on "or you" */

	/*
	 * Special case: if identifying from the screen, and we're swallowed,
	 * and looking at something other than our own symbol, then just say
	 * "the interior of a monster".
	 */
	if (u.uswallow && from_screen && is_swallow_sym(sym)) {
	    if (!found) {
		Sprintf(out_str, "%c       %s", (uchar)sym, mon_interior);
		firstmatch = mon_interior;
	    } else {
		found += append_str(out_str, mon_interior);
	    }
	    need_to_look = TRUE;
	}

	/* Now check for objects */
	for (i = 1; i < MAXOCLASSES; i++) {
	    if (sym == (from_screen ? oc_syms[i] : def_oc_syms[i])) {
		need_to_look = TRUE;
		if (from_screen && i == VENOM_CLASS) {
		    skipped_venom++;
		    continue;
		}
		if (!found) {
		    Sprintf(out_str, "%c       %s", (uchar)sym, an(objexplain[i]));
		    firstmatch = objexplain[i];
		    found++;
			hallu_obj++;
		} else {
		    found += append_str(out_str, an(objexplain[i]));
		}
	    }
	}

	if (sym == DEF_INVISIBLE) {
	    if (!found) {
		Sprintf(out_str, "%c       %s", (uchar)sym, an(invisexplain));
		firstmatch = invisexplain;
		found++;
	    } else {
		found += append_str(out_str, an(invisexplain));
	    }
	}

#define is_cmap_trap(i) ((i) >= S_arrow_trap && (i) <= S_switch)
#define is_cmap_drawbridge(i) ((i) >= S_vodbridge && (i) <= S_hcdbridge)

	/* Now check for graphics symbols */
	for (hit_trap = FALSE, hit_cloud = FALSE, i = 0; i < MAXPCHARS; i++) {
	    x_str = defsyms[i].explanation;
	    if (sym == (force_defsyms ? defsyms[i].sym : (from_screen ? showsyms[i] : defsyms[i].sym)) && *x_str) {
		/* avoid "an air", "a water", or "a floor of a room" */
		int article = (i == S_drkroom || i == S_litroom) ? 2 :		/* 2=>"the" */
			      !(strcmp(x_str, "air") == 0 ||	/* 1=>"an"  */
				strcmp(x_str, "shallow water") == 0 || /* 0=>(none)*/
				strcmp(x_str, "water") == 0);

		if (!found) {
		    if (is_cmap_trap(i)) {
			Sprintf(out_str, "%c       a trap", (uchar)sym);
			hit_trap = TRUE;
		    } else if (level.flags.lethe && !strcmp(x_str, "water")) { //Lethe patch
			Sprintf(out_str, "%c       sparkling water", (uchar)sym); //Lethe patch
		    } else if (strstr(x_str, "cloud") != NULL) { //Don't print a bunch of cloud messages
				Sprintf(out_str, "%c       cloud", (uchar)sym);
				hit_cloud = TRUE;
		    } else {
			Sprintf(out_str, "%c       %s", (uchar)sym,
				article == 2 ? the(x_str) :
				article == 1 ? an(x_str) : x_str);
		    }
		    firstmatch = x_str;
		    found++;
		} else if (!u.uswallow && !(hit_trap && is_cmap_trap(i)) && 
				!(hit_cloud && (strstr(x_str, "cloud") != NULL)) &&
			   !(found >= 3 && is_cmap_drawbridge(i))
		) {
		    if (level.flags.lethe && !strcmp(x_str, "water")) //lethe
				found += append_str(out_str, "sparkling water"); //lethe
		    else if (strstr(x_str, "cloud") != NULL){ //cloudspam
				found += append_str(out_str, "cloud"); //cloudspam
				hit_cloud = TRUE;
			}
		    else //lethe
		    	found += append_str(out_str,
					article == 2 ? the(x_str) :
					article == 1 ? an(x_str) : x_str);
		    if (is_cmap_trap(i)) hit_trap = TRUE;
		}

		if (i == S_altar || is_cmap_trap(i))
		    need_to_look = TRUE;
	    }
	}

	/* Now check for warning symbols */
	for (i = 1; i < WARNCOUNT; i++) {
	    x_str = def_warnsyms[i].explanation;
	    if (sym == (from_screen ? warnsyms[i] : def_warnsyms[i].sym)) {
		if (!found) {
			Sprintf(out_str, "%c       %s",
				(uchar)sym, def_warnsyms[i].explanation);
			firstmatch = def_warnsyms[i].explanation;
			found++;
		} else {
			found += append_str(out_str, def_warnsyms[i].explanation);
		}
		/* Kludge: warning trumps boulders on the display.
		   Reveal the boulder too or player can get confused */
		if (from_screen && boulder_at(cc.x, cc.y))
			Strcat(out_str, " co-located with a large object");
		break;	/* out of for loop*/
	    }
	}
    
	/* if we ignored venom and list turned out to be short, put it back */
	if (skipped_venom && found < 2) {
	    x_str = objexplain[VENOM_CLASS];
	    if (!found) {
		Sprintf(out_str, "%c       %s", (uchar)sym, an(x_str));
		firstmatch = x_str;
		found++;
	    } else {
		found += append_str(out_str, an(x_str));
	    }
	}

	/* handle optional boulder symbol as a special case */ 
	if (iflags.bouldersym && sym == iflags.bouldersym) {
	    if (!found) {
		firstmatch = "boulder";
		Sprintf(out_str, "%c       %s", (uchar)sym, an(firstmatch));
		found++;
	    } else {
		found += append_str(out_str, "boulder");
	    }
	}
	
	/*
	 * If we are looking at the screen, follow multiple possibilities or
	 * an ambiguous explanation by something more detailed.
	 */
	if (from_screen) {
	    if (hallu_obj && Hallucination) {
			char temp_buf[LONGBUFSZ];
			Sprintf(temp_buf, " (%s)", rndobjnam());
			(void)strncat(out_str, temp_buf, LONGBUFSZ - strlen(out_str) - 1);
	    } else if (found > 1 || need_to_look) {

		char monbuf[BUFSZ];
		char shapebuf[BUFSZ];
		char temp_buf[BUFSZ];

		mtmp = lookat(cc.x, cc.y, look_buf, monbuf, shapebuf);
		firstmatch = look_buf;
		if (*firstmatch) {
			if(shapebuf[0]){
				Sprintf(temp_buf, " (%s", firstmatch);
				(void)strncat(out_str, temp_buf, LONGBUFSZ - strlen(out_str) - 1);
				Sprintf(temp_buf, ", %s)", shapebuf);
				(void)strncat(out_str, temp_buf, LONGBUFSZ - strlen(out_str) - 1);
				found = 1;	/* we have something to look up */
			}
			else {
				Sprintf(temp_buf, " (%s)", firstmatch);
				(void)strncat(out_str, temp_buf, LONGBUFSZ - strlen(out_str) - 1);
				found = 1;	/* we have something to look up */
			}
		}
		if (monbuf[0]) {
		    Sprintf(temp_buf, " [seen: %s]", monbuf);
			(void)strncat(out_str, temp_buf, LONGBUFSZ - strlen(out_str) - 1);
		}
		if (mtmp != (struct monst *) 0) {
			strcat(out_str, "\n");
			temp_buf[0] = '\0';
			get_description_of_monster_type(mtmp, temp_buf);
			(void)strncat(out_str, temp_buf, LONGBUFSZ - strlen(out_str) - 1);
			if(uarmh && uarmh->oartifact == ART_ALL_SEEING_EYE_OF_THE_FLY){
				probe_monster(mtmp);
			}
		}
		}
	}

	/* Finally, print out our explanation. */
	if (found) {
		winid datawin = create_nhwindow(NHW_MENU);
		char * temp_print;
		temp_print = strtok(out_str, "\n");
		while (temp_print != NULL)
		{
			putstr(datawin, 0, temp_print);
			temp_print = strtok(NULL, "\n");
		}
	    /* check the data file for information about this thing */
	    if (found == 1 && ans != LOOK_QUICK && ans != LOOK_ONCE &&
			(ans == LOOK_VERBOSE || (flags.help && !quick))) {
		char temp_buf[BUFSZ];
		Strcpy(temp_buf, level.flags.lethe //lethe
					&& !strcmp(firstmatch, "water")?
				"lethe" : firstmatch);
		(void)checkfile(temp_buf, pm, FALSE, (boolean)(ans == LOOK_VERBOSE), &datawin);
	    }
		display_nhwindow(datawin, TRUE);
		destroy_nhwindow(datawin);
	} else {
	    pline("I've never heard of such things.");
	}

    } while (from_screen && !quick && ans != LOOK_ONCE);

    flags.verbose = save_verbose;
    return MOVE_CANCELLED;
